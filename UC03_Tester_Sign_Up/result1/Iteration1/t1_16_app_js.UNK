angular.module('app')
    .factory('Unsubscribe', function ($resource) {
        return $resource('api/unsubscribe/:email/:signature', {}, {})
    });

  
angular.module('app')
    .factory('Account', function Account($resource) {
        return $resource('api/account', {}, {
            'get': {
                method: 'GET', params: {}, isArray: false,
                interceptor: {
                    response: function (response) {
                        // expose response
                        return response;
                    }
                }
            }
        });
    });
angular.module('app').config(function($sceDelegateProvider) {
    $sceDelegateProvider.resourceUrlWhitelist(['self','uxcrowd://?orderId=**','https://securepay.tcsbank.ru/**', 'https://test.uxcrowd.ru/videos/**', 'https://uxcrowd.ru/videos/**','https://securepay.tinkoff.ru/**'])
});
angular.module('app').directive('convertToNumber', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            ngModel.$parsers.push(function (val) {
                return parseInt(val, 10);
            });
            ngModel.$formatters.push(function (val) {
                return '' + val;
            });
        }
    };
});




angular.module('app')
    .factory('authExpiredInterceptor', function ($rootScope, $q, $injector) {
        return {
            responseError: function (response) {
                // If we have an unauthorized request we redirect to the login page
                // Don't do this check on the account API to avoid infinite loop
                if (response.status == 401 && response.data.path !== undefined && response.data.path.indexOf("/api/account") == -1) {
                    var Auth = $injector.get('Auth');
                    var $state = $injector.get('$state');
                    var to = $rootScope.toState;
                    var params = $rootScope.toStateParams;
                    Auth.logout();
                    $rootScope.previousStateName = to;
                    $rootScope.previousStateNameParams = params;
                    $state.go('new_main_index');
                } else if (response.status == 403 && response.config.method != 'GET' && response.headers('CSRF-Expired') === 'true') {
                    // If the CSRF token expired, then try to get a new CSRF token and retry the old request
                     var Account = $injector.get('Account');
                     var $http = $injector.get('$http');
                     var deferred = $q.defer();

                     // Create a new session (recover the session)
                     // We use login method that logs the user in using the current credentials and
                     // returns a promise
                     $http.get('/api/renewToken').then(deferred.resolve, deferred.reject);

                     // When the session recovered, make the same backend call again and chain the request
                     return deferred.promise.then(function(newResponse) {
                         if (newResponse.headers('CSRF-Expired') !== 'true') {
                             // retry the old request after the new CSRF-TOKEN is obtained
                             return $http(response.config);
                         } else {
                             // unlikely get here but reject with the old response any way and avoid infinite loop
                             return $q.reject(response);
                         }
                     })
                }
                return $q.reject(response);
            }
        };
    });



angular.module('app')
    .factory('AuthServerProvider', function loginService($http, $window) {
        return {
            login: function (credentials) {
                var data = 'username=' + encodeURIComponent(credentials.username) +
                    '&password=' + encodeURIComponent(credentials.password) +
                    '&remember-me=' + credentials.rememberMe + '&submit=Login';
                return $http.post('api/authentication', data, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }).success(function (response) {
                    return response;
                });
            },
            logout: function () {
                // logout from the server
                $http.post('api/logout').success(function (response) {
                    // to get a new csrf token call the api
                    window.Intercom('shutdown');
                    window.Intercom("boot", {
                        app_id: window.$config.intercomId
                    });
                    $http.get('api/account');
                    return response;
                });
            },
            getToken: function () {
                return "token in auth.session.service.js";
            },
            hasValidToken: function () {
                var token = this.getToken();
                return !!token;
            }
        };
    });



angular.module('app')
    .directive('hasAnyAuthority', ['Principal', function (Principal) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var setVisible = function () {
                        element.removeClass('hidden');
                    },
                    setHidden = function () {
                        element.addClass('hidden');
                    },
                    defineVisibility = function (reset) {
                        var result;
                        if (reset) {
                            setVisible();
                        }

                        result = Principal.hasAnyAuthority(authorities);
                        if (result) {
                            setVisible();
                        } else {
                            setHidden();
                        }
                    },
                    authorities = attrs.hasAnyAuthority.replace(/\s+/g, '').split(',');

                if (authorities.length > 0) {
                    defineVisibility(true);

                    scope.$watch(function (scope) {
                        return Principal.isAuthenticated();
                    }, function (newValue) {
                        defineVisibility(true);
                    });
                }
            }
        };
    }])
    .directive('hasAuthority', ['Principal', function (Principal) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var setVisible = function () {
                        element.removeClass('hidden');
                    },
                    setHidden = function () {
                        element.addClass('hidden');
                    },
                    defineVisibility = function (reset) {

                        if (reset) {
                            setVisible();
                        }

                        Principal.hasAuthority(authority)
                            .then(function (result) {
                                if (result) {
                                    setVisible();
                                } else {
                                    setHidden();
                                }
                            });
                    },
                    authority = attrs.hasAuthority.replace(/\s+/g, '');

                if (authority.length > 0) {
                    defineVisibility(true);

                    scope.$watch(function (scope) {
                        return Principal.isAuthenticated();
                    }, function (newValue) {
                        defineVisibility(true);
                    });
                }
            }
        };
    }]);



angular.module('app')
    .service('DateUtils', function ($filter) {

        this.convertLocaleDateToServer = function (date) {
            if (date) {
                return $filter('date')(date, 'yyyy-MM-dd');
            } else {
                return null;
            }
        };

        this.convertLocaleDateFromServer = function (date) {
            if (date) {
                var dateString = date.split("-");
                return new Date(dateString[0], dateString[1] - 1, dateString[2]);
            }
            return null;
        };

        this.convertDateToServerDuration = function (date) {
            if (date) {
                var dateFormatted = $filter('date')(date, 'HH:mm:ss');
                var split = dateFormatted.split(":");
                return "PT" + split[0] + "H" + split[1] + "M" + split[2] + "S";
            } else {
                return null;
            }
        };

        this.convertDuratioinFromServer = function (date) {
            if (date) {
                var dateString = date.replace("PT", "").replace("H", ":").replace("M", ":").replace("S", "");
                //var dateString = date.split(":");
                return new Duration(dateString[0], dateString[1] - 1, dateString[2]);
            }
            return null;
        };

        this.convertDateTimeFromServer = function (date) {
            if (date) {
                return new Date(date);
            } else {
                return null;
            }
        };

        // common date format for all date input fields
        this.dateformat = function () {
            return 'yyyy-MM-dd';
        }

        this.secondsToHm = function(d) {
           d = Number(d);
           var hours = Math.floor(d / 3600);
           var minutes = Math.floor(d % 3600 / 60);
           var seconds = Math.floor(d % 3600 % 60);

           return (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds  < 10 ? "0" + seconds : seconds);
        }

        this.secondsToMinutes = function(d) {
           d = Number(d);
           var hours = Math.floor(d / 3600);
           var minutes = Math.floor(d % 3600 / 60) + hours * 60;
           var seconds = Math.floor(d % 3600 % 60);

           return (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds  < 10 ? "0" + seconds : seconds);
        }

        this.hmsToSeconds = function(hms) {
           var a = hms.split(':');
           return (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);
        }

    });



angular.module('app')
    .factory('errorHandlerInterceptor', function ($q, $rootScope) {
        return {
            'responseError': function (response) {
                if (!(response.status == 401 && response.config.url.indexOf("/api/account") == 0 )) {
                    $rootScope.$emit('uxtest.httpError', response);
                }
                return $q.reject(response);
            }
        };
    });
/* globals $ */


angular.module('app')
    .directive('showValidation', function () {
        return {
            restrict: 'A',
            require: 'form',
            link: function (scope, element) {
                element.find('.form-group').each(function () {
                    var $formGroup = $(this);
                    var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');

                    if ($inputs.length > 0) {
                        $inputs.each(function () {
                            var $input = $(this);
                            scope.$watch(function () {
                                return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');
                            }, function (isInvalid) {
                                $formGroup.toggleClass('has-error', isInvalid);
                            });
                        });
                    }
                });
            }
        };
    });

/* globals $ */


angular.module('app')
    .directive('passwordStrengthBar', function () {
        return {
            replace: true,
            restrict: 'E',
            template: '<div id="strength">' +
            '<small>Сложность пароля:</small>' +
            '<ul id="strengthBar">' +
            '<li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li>' +
            '</ul>' +
            '</div>',
            link: function (scope, iElement, attr) {
                var strength = {
                    colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],
                    mesureStrength: function (p) {

                        var _force = 0;
                        var _regex = /[$-/:-?{-~!"^_`\[\]]/g; // "

                        var _lowerLetters = /[a-z]+/.test(p);
                        var _upperLetters = /[A-Z]+/.test(p);
                        var _numbers = /[0-9]+/.test(p);
                        var _symbols = _regex.test(p);

                        var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];
                        var _passedMatches = $.grep(_flags, function (el) {
                            return el === true;
                        }).length;

                        _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);
                        _force += _passedMatches * 10;

                        // penality (short password)
                        _force = (p.length <= 6) ? Math.min(_force, 10) : _force;

                        // penality (poor variety of characters)
                        _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;
                        _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;
                        _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;

                        return _force;

                    },
                    getColor: function (s) {

                        var idx = 0;
                        if (s <= 10) {
                            idx = 0;
                        }
                        else if (s <= 20) {
                            idx = 1;
                        }
                        else if (s <= 30) {
                            idx = 2;
                        }
                        else if (s <= 40) {
                            idx = 3;
                        }
                        else {
                            idx = 4;
                        }

                        return {idx: idx + 1, col: this.colors[idx]};
                    }
                };
                scope.$watch(attr.passwordToCheck, function (password) {
                    if (password) {
                        var c = strength.getColor(strength.mesureStrength(password));
                        iElement.removeClass('ng-hide');
                        iElement.find('ul').children('li')
                            .css({'background-color': '#DDD'})
                            .slice(0, c.idx)
                            .css({'background-color': c.col});
                    }
                });
            }
        };
    });

angular.module('app')
    .factory('PasswordResetInit', function ($resource) {
        return $resource('api/account/password/reset', {}, {})
    });


angular.module('app')
    .factory('Principal', function Principal($q, Account) {
        var _identity,
            _authenticated = false;

        return {
            isIdentityResolved: function () {
                return angular.isDefined(_identity);
            },
            isAuthenticated: function () {
                return _authenticated;
            },
            hasAuthority: function (authority) {
                if (!_authenticated) {
                    return $q.when(false);
                }

                return this.identity().then(function (_id) {
                    return _id.role && _id.role.indexOf(authority) !== -1;
                }, function (err) {
                    return false;
                });
            },
            hasAnyAuthority: function (authorities) {
                if (!_authenticated || !_identity || !_identity.role) {
                    return false;
                }

                for (var i = 0; i < authorities.length; i++) {
                    if (_identity.role.indexOf(authorities[i]) !== -1) {
                        return true;
                    }
                }

                return false;
            },
            authenticate: function (identity) {
                _identity = identity;
                _authenticated = identity !== null;
            },
            identity: function (force) {
                var deferred = $q.defer();

                if (force === true) {
                    _identity = undefined;
                }

                // check and see if we have retrieved the identity data from the server.
                // if we have, reuse it by immediately resolving
                if (angular.isDefined(_identity)) {
                    if (_identity!=null && _identity.id!=null){
                        window.Intercom('update', {
                            app_id: window.$config.intercomId,
                            email: _identity.email,
                            user_id: _identity.id
                        });
                    }
                    deferred.resolve(_identity);

                    return deferred.promise;
                }

                // retrieve the identity data from the server, update the identity object, and then resolve.
                Account.get().$promise
                    .then(function (account) {
                        _identity = account.data;
                        _authenticated = true;
                        if (_identity!=null && _identity.id!=null){
                            window.Intercom('update', {
                                app_id: window.$config.intercomId,
                                email: _identity.email,
                                user_id: _identity.id
                            });
                        }
                        deferred.resolve(_identity);
                    })
                    .catch(function () {
                        _identity = null;
                        _authenticated = false;
                        deferred.resolve(_identity);
                    });
                return deferred.promise;
            }
        };
    });



angular.module('app')
    .factory('Register', function ($resource) {
        return $resource('api/register', {}, {});
    })
    .factory('TesterIntegration', function ($resource) {
        return $resource('api/tester-integration', {}, {});
    })
    .factory('CustomerRegister', function ($resource) {
        return $resource('api/public/paymentTariffInitRequest', {}, {});
    });





angular.module('app')
    .factory('Sessions', function ($resource) {
        return $resource('api/account/sessions/:series', {}, {
            'getAll': {method: 'GET', isArray: true}
        });
    });




angular.module('app')
  .factory('Translation', function Translation($rootScope, $http, $config, $window) {
    const path = 'assets/lang/';

    return {
      getTranslation: function getTranslation(lang) {
        return $http.get(path + lang + '.json')
      },

      getExtensionId: function getTranslation() {
        if ($config.locale == 'en'){
            return $config.extensionIDEn;
        } else {
            return $config.extensionIDRu;
        }
      },

      translate: function(labelCode) {
          return $config.translation[labelCode.split('.')[0]] && $config.translation[labelCode.split('.')[0]][labelCode.split('.')[1]];
      },

      switchLanguage: function switchLanguage(lang) {
        localStorage.setItem('lang', lang);
        this.getTranslation(lang)
          .success(function (data) {
              $config.translation = data;
              $window.location.reload();
          })
          .error(function () {
              console.error('Cannot load translation from "' + lang + '.json" file :(')
          });
      }
    }
  });